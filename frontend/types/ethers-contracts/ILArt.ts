/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ILArtInterface extends utils.Interface {
  functions: {
    "Interact(uint256,uint256[],uint16[])": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "Interact"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "Interact",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "Interact", data: BytesLike): Result;

  events: {
    "ParameterChanged(address,uint256,uint256[],uint16[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ParameterChanged"): EventFragment;
}

export interface ParameterChangedEventObject {
  caller: string;
  artworkId: BigNumber;
  parameterIds: BigNumber[];
  parametervalues: number[];
}
export type ParameterChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber[], number[]],
  ParameterChangedEventObject
>;

export type ParameterChangedEventFilter =
  TypedEventFilter<ParameterChangedEvent>;

export interface ILArt extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILArtInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Interact(
      artworkId: PromiseOrValue<BigNumberish>,
      parameterIds: PromiseOrValue<BigNumberish>[],
      parameterValues: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  Interact(
    artworkId: PromiseOrValue<BigNumberish>,
    parameterIds: PromiseOrValue<BigNumberish>[],
    parameterValues: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    Interact(
      artworkId: PromiseOrValue<BigNumberish>,
      parameterIds: PromiseOrValue<BigNumberish>[],
      parameterValues: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ParameterChanged(address,uint256,uint256[],uint16[])"(
      caller?: null,
      artworkId?: null,
      parameterIds?: null,
      parametervalues?: null
    ): ParameterChangedEventFilter;
    ParameterChanged(
      caller?: null,
      artworkId?: null,
      parameterIds?: null,
      parametervalues?: null
    ): ParameterChangedEventFilter;
  };

  estimateGas: {
    Interact(
      artworkId: PromiseOrValue<BigNumberish>,
      parameterIds: PromiseOrValue<BigNumberish>[],
      parameterValues: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    Interact(
      artworkId: PromiseOrValue<BigNumberish>,
      parameterIds: PromiseOrValue<BigNumberish>[],
      parameterValues: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
