{
	"id": "321b234a9101dcd9bd4d060bd244132b",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"ILArt.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// IL (Interactive Live) Art Contract\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a very simple contract that can record participation in a\r\n * live stream. It is meant to be deployed on a no/low gas blockchain. Handling\r\n * of emitted events relies on the implentation of the artist.\r\n *\r\n */\r\n\r\n\r\ncontract ILArt {\r\n    \r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"ILArt.sol": {
				"ILArt": {
					"abi": [],
					"devdoc": {
						"details": "This is a very simple contract that can record participation in a live stream. It is meant to be deployed on a no/low gas blockchain. Handling of emitted events relies on the implentation of the artist.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"ILArt.sol\":339:364  contract ILArt {\r... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"ILArt.sol\":339:364  contract ILArt {\r... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220dca4552dd7cdf28c3408474080c91875024bc128933c461eb3d81d3f7220a6df64736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220dca4552dd7cdf28c3408474080c91875024bc128933c461eb3d81d3f7220a6df64736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDC LOG4 SSTORE 0x2D 0xD7 0xCD CALLCODE DUP13 CALLVALUE ADDMOD SELFBALANCE BLOCKHASH DUP1 0xC9 XOR PUSH22 0x24BC128933C461EB3D81D3F7220A6DF64736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "339:25:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600080fdfea2646970667358221220dca4552dd7cdf28c3408474080c91875024bc128933c461eb3d81d3f7220a6df64736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDC LOG4 SSTORE 0x2D 0xD7 0xCD CALLCODE DUP13 CALLVALUE ADDMOD SELFBALANCE BLOCKHASH DUP1 0xC9 XOR PUSH22 0x24BC128933C461EB3D81D3F7220A6DF64736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "339:25:0:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "12600",
								"executionCost": "66",
								"totalCost": "12666"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 339,
									"end": 364,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 339,
									"end": 364,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 339,
									"end": 364,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 339,
									"end": 364,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 339,
									"end": 364,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 339,
									"end": 364,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 339,
									"end": 364,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 339,
									"end": 364,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 339,
									"end": 364,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 339,
									"end": 364,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 339,
									"end": 364,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 339,
									"end": 364,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 339,
									"end": 364,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 339,
									"end": 364,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 339,
									"end": 364,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 339,
									"end": 364,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 339,
									"end": 364,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 339,
									"end": 364,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 339,
									"end": 364,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 339,
									"end": 364,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 339,
									"end": 364,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220dca4552dd7cdf28c3408474080c91875024bc128933c461eb3d81d3f7220a6df64736f6c63430008070033",
									".code": [
										{
											"begin": 339,
											"end": 364,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 339,
											"end": 364,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 339,
											"end": 364,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 339,
											"end": 364,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 339,
											"end": 364,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 339,
											"end": 364,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This is a very simple contract that can record participation in a live stream. It is meant to be deployed on a no/low gas blockchain. Handling of emitted events relies on the implentation of the artist.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ILArt.sol\":\"ILArt\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"ILArt.sol\":{\"keccak256\":\"0x17e68b8210e8019e88273deaa634038b091d8973caa13a0cfebae1944e2d8247\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a9a50732f511be9bcadb84cab0faea46508f29507965c436e11d966d8e466e58\",\"dweb:/ipfs/Qmdr2oQNh2GrNrqDGMMKVsKBytXXH4szAFtacXkazDrgkd\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"ILArt.sol": {
				"ast": {
					"absolutePath": "ILArt.sol",
					"exportedSymbols": {
						"ILArt": [
							3
						]
					},
					"id": 4,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "74:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "101:232:0",
								"text": " @dev This is a very simple contract that can record participation in a\n live stream. It is meant to be deployed on a no/low gas blockchain. Handling\n of emitted events relies on the implentation of the artist."
							},
							"fullyImplemented": true,
							"id": 3,
							"linearizedBaseContracts": [
								3
							],
							"name": "ILArt",
							"nameLocation": "348:5:0",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 4,
							"src": "339:25:0",
							"usedErrors": []
						}
					],
					"src": "74:290:0"
				},
				"id": 0
			}
		}
	}
}