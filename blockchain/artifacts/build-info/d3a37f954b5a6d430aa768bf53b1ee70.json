{
	"id": "d3a37f954b5a6d430aa768bf53b1ee70",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"ILArt.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// IL (Interactive Live) Art Contract\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a very simple contract that can record participation in a\r\n * live stream. It is meant to be deployed on a no/low gas blockchain. Handling\r\n * of emitted events relies on the implentation of the artist.\r\n *\r\n */\r\n\r\n\r\ncontract ILArt {\r\n\r\n    /**\r\n     * @dev ParameterChanged is the core event and is emitted when there is participation\r\n     * from the audience. Artist needs to process the participation themselves\r\n     *\r\n     * Multiple parameters can be updated on the same event.\r\n     *\r\n     */\r\n    event ParameterChanged(address caller, uint artworkId, uint[] parameterIds, uint[] parametervalues);\r\n\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"ILArt.sol": {
				"ILArt": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "caller",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "artworkId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256[]",
									"name": "parameterIds",
									"type": "uint256[]"
								},
								{
									"indexed": false,
									"internalType": "uint256[]",
									"name": "parametervalues",
									"type": "uint256[]"
								}
							],
							"name": "ParameterChanged",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "This is a very simple contract that can record participation in a live stream. It is meant to be deployed on a no/low gas blockchain. Handling of emitted events relies on the implentation of the artist.",
						"events": {
							"ParameterChanged(address,uint256,uint256[],uint256[])": {
								"details": "ParameterChanged is the core event and is emitted when there is participation from the audience. Artist needs to process the participation themselves Multiple parameters can be updated on the same event."
							}
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"ILArt.sol\":339:735  contract ILArt {\r... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"ILArt.sol\":339:735  contract ILArt {\r... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212207bdcb661e793dcef3f77284d8b3cbf0cda8d1dc9c5e5d0d776dd5975b077a07b64736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212207bdcb661e793dcef3f77284d8b3cbf0cda8d1dc9c5e5d0d776dd5975b077a07b64736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH28 0xDCB661E793DCEF3F77284D8B3CBF0CDA8D1DC9C5E5D0D776DD5975B0 PUSH24 0xA07B64736F6C634300080700330000000000000000000000 ",
							"sourceMap": "339:396:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600080fdfea26469706673582212207bdcb661e793dcef3f77284d8b3cbf0cda8d1dc9c5e5d0d776dd5975b077a07b64736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH28 0xDCB661E793DCEF3F77284D8B3CBF0CDA8D1DC9C5E5D0D776DD5975B0 PUSH24 0xA07B64736F6C634300080700330000000000000000000000 ",
							"sourceMap": "339:396:0:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "12600",
								"executionCost": "66",
								"totalCost": "12666"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 339,
									"end": 735,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 339,
									"end": 735,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 339,
									"end": 735,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 339,
									"end": 735,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 339,
									"end": 735,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 339,
									"end": 735,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 339,
									"end": 735,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 339,
									"end": 735,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 339,
									"end": 735,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 339,
									"end": 735,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 339,
									"end": 735,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 339,
									"end": 735,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 339,
									"end": 735,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 339,
									"end": 735,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 339,
									"end": 735,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 339,
									"end": 735,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 339,
									"end": 735,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 339,
									"end": 735,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 339,
									"end": 735,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 339,
									"end": 735,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 339,
									"end": 735,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212207bdcb661e793dcef3f77284d8b3cbf0cda8d1dc9c5e5d0d776dd5975b077a07b64736f6c63430008070033",
									".code": [
										{
											"begin": 339,
											"end": 735,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 339,
											"end": 735,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 339,
											"end": 735,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 339,
											"end": 735,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 339,
											"end": 735,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 339,
											"end": 735,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"artworkId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"parameterIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"parametervalues\",\"type\":\"uint256[]\"}],\"name\":\"ParameterChanged\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"This is a very simple contract that can record participation in a live stream. It is meant to be deployed on a no/low gas blockchain. Handling of emitted events relies on the implentation of the artist.\",\"events\":{\"ParameterChanged(address,uint256,uint256[],uint256[])\":{\"details\":\"ParameterChanged is the core event and is emitted when there is participation from the audience. Artist needs to process the participation themselves Multiple parameters can be updated on the same event.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ILArt.sol\":\"ILArt\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"ILArt.sol\":{\"keccak256\":\"0xc01e081de76d47648eab8c44ff6c377e8984866db68159232778c00da915f457\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d20a0d791ef99480bc993471b687dde1f9e950651707aa002e613d4f47b42109\",\"dweb:/ipfs/QmaTtXsgSrhG7onWBXJSh2URfXf42R2SvGqTQ4PJZNLfCV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"ILArt.sol": {
				"ast": {
					"absolutePath": "ILArt.sol",
					"exportedSymbols": {
						"ILArt": [
							16
						]
					},
					"id": 17,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "74:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "101:232:0",
								"text": " @dev This is a very simple contract that can record participation in a\n live stream. It is meant to be deployed on a no/low gas blockchain. Handling\n of emitted events relies on the implentation of the artist."
							},
							"fullyImplemented": true,
							"id": 16,
							"linearizedBaseContracts": [
								16
							],
							"name": "ILArt",
							"nameLocation": "348:5:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "363:261:0",
										"text": " @dev ParameterChanged is the core event and is emitted when there is participation\n from the audience. Artist needs to process the participation themselves\n Multiple parameters can be updated on the same event."
									},
									"id": 15,
									"name": "ParameterChanged",
									"nameLocation": "636:16:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 14,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"indexed": false,
												"mutability": "mutable",
												"name": "caller",
												"nameLocation": "661:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 15,
												"src": "653:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "653:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"indexed": false,
												"mutability": "mutable",
												"name": "artworkId",
												"nameLocation": "674:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 15,
												"src": "669:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 6,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "669:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 10,
												"indexed": false,
												"mutability": "mutable",
												"name": "parameterIds",
												"nameLocation": "692:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 15,
												"src": "685:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 8,
														"name": "uint",
														"nodeType": "ElementaryTypeName",
														"src": "685:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 9,
													"nodeType": "ArrayTypeName",
													"src": "685:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 13,
												"indexed": false,
												"mutability": "mutable",
												"name": "parametervalues",
												"nameLocation": "713:15:0",
												"nodeType": "VariableDeclaration",
												"scope": 15,
												"src": "706:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 11,
														"name": "uint",
														"nodeType": "ElementaryTypeName",
														"src": "706:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 12,
													"nodeType": "ArrayTypeName",
													"src": "706:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "652:77:0"
									},
									"src": "630:100:0"
								}
							],
							"scope": 17,
							"src": "339:396:0",
							"usedErrors": []
						}
					],
					"src": "74:661:0"
				},
				"id": 0
			}
		}
	}
}